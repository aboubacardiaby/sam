/*
Deployment script for SAMDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "SAMDB"
:setvar DefaultFilePrefix "SAMDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[EmailAddress]...';


GO
CREATE TABLE [dbo].[EmailAddress] (
    [EmailAddressID] INT          IDENTITY (1, 1) NOT NULL,
    [Memberid]       VARCHAR (50) NOT NULL,
    [EmailAddress]   NCHAR (100)  NULL,
    [ModifiedDate]   DATETIME     NULL,
    CONSTRAINT [PK_EmailAddress] PRIMARY KEY CLUSTERED ([EmailAddressID] ASC)
);


GO
PRINT N'Creating [dbo].[tblAddress]...';


GO
CREATE TABLE [dbo].[tblAddress] (
    [AddressID]    INT          IDENTITY (1, 1) NOT NULL,
    [Memberid]     VARCHAR (50) NOT NULL,
    [AddressLine1] NCHAR (100)  NULL,
    [AddressLine2] NCHAR (100)  NULL,
    [City]         NCHAR (100)  NULL,
    [State]        NCHAR (50)   NULL,
    [ZipCode]      NCHAR (100)  NULL,
    [ModifiedDate] DATETIME     NOT NULL,
    CONSTRAINT [PK_tblAddress] PRIMARY KEY CLUSTERED ([AddressID] ASC)
);


GO
PRINT N'Creating [dbo].[tblMember]...';


GO
CREATE TABLE [dbo].[tblMember] (
    [ID]          INT          IDENTITY (1, 1) NOT NULL,
    [MemberId]    VARCHAR (50) NOT NULL,
    [FirstName]   NCHAR (100)  NOT NULL,
    [LastName]    NCHAR (100)  NOT NULL,
    [CreatedBy]   NCHAR (70)   NULL,
    [createdDate] DATETIME     NOT NULL,
    CONSTRAINT [PK_tblMember] PRIMARY KEY CLUSTERED ([MemberId] ASC)
);


GO
PRINT N'Creating [dbo].[tblPhone]...';


GO
CREATE TABLE [dbo].[tblPhone] (
    [PhoneNumberID] INT          IDENTITY (1, 1) NOT NULL,
    [Memberid]      VARCHAR (50) NOT NULL,
    [PhoneNumber]   NCHAR (100)  NULL,
    [ModifiedDate]  DATETIME     NOT NULL,
    CONSTRAINT [PK_tblPhone] PRIMARY KEY CLUSTERED ([PhoneNumberID] ASC)
);


GO
PRINT N'Creating [dbo].[UserProfile]...';


GO
CREATE TABLE [dbo].[UserProfile] (
    [UserId]    INT            IDENTITY (1, 1) NOT NULL,
    [UserName]  NVARCHAR (MAX) NULL,
    [FirstName] NVARCHAR (MAX) NULL,
    [LastName]  NVARCHAR (MAX) NULL,
    [Address]   NVARCHAR (MAX) NULL,
    [City]      NVARCHAR (MAX) NULL,
    [State]     NCHAR (10)     NULL,
    [ZipCode]   NCHAR (10)     NULL,
    [Phone]     NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating [dbo].[webpages_Membership]...';


GO
CREATE TABLE [dbo].[webpages_Membership] (
    [UserId]                                  INT            NOT NULL,
    [CreateDate]                              DATETIME       NULL,
    [ConfirmationToken]                       NVARCHAR (128) NULL,
    [IsConfirmed]                             BIT            NULL,
    [LastPasswordFailureDate]                 DATETIME       NULL,
    [PasswordFailuresSinceLastSuccess]        INT            NOT NULL,
    [Password]                                NVARCHAR (128) NOT NULL,
    [PasswordChangedDate]                     DATETIME       NULL,
    [PasswordSalt]                            NVARCHAR (128) NOT NULL,
    [PasswordVerificationToken]               NVARCHAR (128) NULL,
    [PasswordVerificationTokenExpirationDate] DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating [dbo].[webpages_OAuthMembership]...';


GO
CREATE TABLE [dbo].[webpages_OAuthMembership] (
    [Provider]       NVARCHAR (30)  NOT NULL,
    [ProviderUserId] NVARCHAR (100) NOT NULL,
    [UserId]         INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Provider] ASC, [ProviderUserId] ASC)
);


GO
PRINT N'Creating [dbo].[webpages_Roles]...';


GO
CREATE TABLE [dbo].[webpages_Roles] (
    [RoleId]   INT            IDENTITY (1, 1) NOT NULL,
    [RoleName] NVARCHAR (256) NOT NULL,
    PRIMARY KEY CLUSTERED ([RoleId] ASC),
    UNIQUE NONCLUSTERED ([RoleName] ASC)
);


GO
PRINT N'Creating [dbo].[webpages_UsersInRoles]...';


GO
CREATE TABLE [dbo].[webpages_UsersInRoles] (
    [UserId] INT NOT NULL,
    [RoleId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[webpages_Membership]...';


GO
ALTER TABLE [dbo].[webpages_Membership]
    ADD DEFAULT ((0)) FOR [IsConfirmed];


GO
PRINT N'Creating unnamed constraint on [dbo].[webpages_Membership]...';


GO
ALTER TABLE [dbo].[webpages_Membership]
    ADD DEFAULT ((0)) FOR [PasswordFailuresSinceLastSuccess];


GO
PRINT N'Creating [dbo].[FK_EmailAddress_tblMember]...';


GO
ALTER TABLE [dbo].[EmailAddress]
    ADD CONSTRAINT [FK_EmailAddress_tblMember] FOREIGN KEY ([Memberid]) REFERENCES [dbo].[tblMember] ([MemberId]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_tblAddress_tblAddress]...';


GO
ALTER TABLE [dbo].[tblAddress]
    ADD CONSTRAINT [FK_tblAddress_tblAddress] FOREIGN KEY ([Memberid]) REFERENCES [dbo].[tblMember] ([MemberId]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_tblPhone_tblMember]...';


GO
ALTER TABLE [dbo].[tblPhone]
    ADD CONSTRAINT [FK_tblPhone_tblMember] FOREIGN KEY ([Memberid]) REFERENCES [dbo].[tblMember] ([MemberId]) ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[fk_RoleId]...';


GO
ALTER TABLE [dbo].[webpages_UsersInRoles]
    ADD CONSTRAINT [fk_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[webpages_Roles] ([RoleId]);


GO
PRINT N'Creating [dbo].[fk_UserId]...';


GO
ALTER TABLE [dbo].[webpages_UsersInRoles]
    ADD CONSTRAINT [fk_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[UserProfile] ([UserId]);


GO
PRINT N'Creating [dbo].[ADD_NEWADDRESS]...';


GO

CREATE PROCEDURE [dbo].[ADD_NEWADDRESS]
		@Memberid VARCHAR(50),
		@AddressLine1 VARCHAR(100),	
		@AddressLine2 VARCHAR(100),
		@City VARCHAR(100),	
		@State VARCHAR(100),
		@Zipcode VARCHAR(100)
		
AS
BEGIN
INSERT INTO [dbo].[tblAddress]
           ([MEMBERID],
		   [AddressLine1]
           ,[AddressLine2]
           ,[City]
           ,[State]
           ,[ZipCode]
			,[ModifiedDate])
     VALUES
           (@Memberid,
           @AddressLine1
           ,@AddressLine2
           ,@City
           ,@State
           ,@Zipcode
           ,GETDATE())

END
GO
PRINT N'Creating [dbo].[ADD_NEWEMAILADDRESS]...';


GO

CREATE PROCEDURE [dbo].[ADD_NEWEMAILADDRESS]
		@Memberid VARCHAR(100),		
		@EmailAddress NVARCHAR(100)
		

AS
BEGIN
INSERT INTO [dbo].[EmailAddress]
           ([Memberid]
           ,[EmailAddress]
           ,[ModifiedDate])
     VALUES
           (@Memberid
           ,@EmailAddress
           ,GETDATE())
END
GO
PRINT N'Creating [dbo].[ADD_NEWPHONE]...';


GO
CREATE PROCEDURE [dbo].[ADD_NEWPHONE]
		@Memberid VARCHAR(50),
		@PhoneNumber NVARCHAR(100)
	
AS
BEGIN
INSERT INTO [dbo].[tblPhone]
           ([MEMBERID],
		   [PhoneNumber]
           ,[ModifiedDate])
     VALUES
           (@Memberid,
		   @PhoneNumber
           ,GETDATE())

END
GO
PRINT N'Creating [dbo].[Usp_GetAllMembers]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE Usp_GetAllMembers
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

  SELECT m.[MemberId]
      ,[FirstName]
      ,[LastName]
	  , a.[AddressLine1]
      ,a.[AddressLine2]
      ,a.[City]
      ,a.[State]
      ,a.[ZipCode]
	  ,p.PhoneNumber
	  ,e.EmailAddress 
  FROM [SAMDB].[dbo].[tblMember] m
  left JOIN [SAMDB].[dbo].tblAddress a ON m.MemberId =a.Memberid
  left JOIN [SAMDB].[dbo].EmailAddress e ON m.MemberId =e.Memberid
  left JOIN [SAMDB].[dbo].tblPhone P ON m.MemberId =p.Memberid
END
GO
PRINT N'Creating [dbo].[ADD_NEWMEMBER]...';


GO
CREATE PROCEDURE [dbo].[ADD_NEWMEMBER]	 
	  @FirstName NVARCHAR(100),
	  @LastName NVARCHAR(100),	  
	  @AddressLine1 VARCHAR(100),	
	  @AddressLine2 VARCHAR(100),
	  @City VARCHAR(100),	
	  @State VARCHAR(100),
	  @Zipcode VARCHAR(100),
	  @PhoneNumber NVARCHAR(100),
	  @EmailAddress NVARCHAR(100),
	  @CreatedBy NVARCHAR(100)
AS
BEGIN
	BEGIN TRANSACTION;
		DECLARE @PhoneNumberID INT,
			  @EmailAddressID INT,
			@MemberId NVARCHAR(100),
			  @AddressID INT
		SET @Memberid =CONCAT(SUBSTRING(@FirstName, 0,3) ,SUBSTRING(@LastName, 0,2),(CAST(RAND(CHECKSUM(NEWID())) * 100 as INT) + 1))  

		INSERT INTO [dbo].[tblMember]
				   ([MemberId]
				   ,[FirstName]
				   ,[LastName]				  
				   ,[CreatedBy]
				   ,[createdDate])
			 VALUES
				   (@MemberId
				   ,@FirstName
				   ,@LastName				   
				   ,@CreatedBy
				   ,GETDATE())
		-- INSERT ADDRESS AND GET ADDRESSID
		 EXEC [dbo].[ADD_NEWADDRESS]@Memberid, @AddressLine1,@AddressLine2,@City,@State,@Zipcode
 
		-- INSERT PHONE NUMBER
		EXEC [DBO].[ADD_NEWPHONE] @Memberid,@PhoneNumber
		-- INSERT NEW E-MAIL ADDRESS
		EXEC [dbo].[ADD_NEWEMAILADDRESS]@Memberid, @EmailAddress
		
	COMMIT TRANSACTION;
END
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
